<?php
require_once('flag_entity.field.inc');
/**
 * Get entity info
 */
function flag_entity_entity_get_info($entity_type) {
  $info = entity_get_info($entity_type);
  return $info;
}

/**
 * Get token info base on entity
 */
function flag_entity_token_get_type($entity_type) {
  $return = '';
  switch ($entity_type) {
    case 'taxonomy_term':
      $return = 'term';
      break;
    case 'taxonomy_vocabulary':
      $return = 'vocabulary';
      break;
    default:
      $return = str_replace('_', '-', $entity_type);
      break;
  }
  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flag_entity_form_flag_form_alter(&$form, &$form_state, $form_id) {
  $bundles = array_keys(field_info_bundles($form['#flag']->content_type));
  $options = array_combine($bundles, $bundles);
  $form['access']['types']['#options'] = $options;
}

/**
 * Select handler for flag base on entity. Flag name will be flag_{entity}
 * Default handler is flag_entity.
 */
function flag_entity_handler($entity) {
  if(class_exists('flag_' . $entity)) {
    return 'flag_' . $entity;
  }
  return 'flag_entity';
}

/**
 * Implements hook_flag_definitions().
 *
 * Defines the flags this module implements.
 *
 * @return
 *   An "array of arrays", keyed by content-types. The 'handler' slot
 *   should point to the PHP class implementing this flag.
 */
function flag_entity_flag_definitions() {
  $return = array();
  // All Drupal's entity
  $drupal_entity = entity_get_info();

  foreach ($drupal_entity as $type => $entity) {
    if(!in_array($type, array('node', 'comment', 'user'))) {
      $return += array(
        $type => array(
          'title' => $entity['label'],
          'description' => 'Drupal entity ' . $entity['label'],
          'handler' => flag_entity_handler($type),
        )
      );
    }
  }
  return $return;
}

/**
 * Implements a node flag.
 */
class flag_entity extends flag_flag {
  
  function options() {
    $options = parent::options();
    $options += array(
      'show_on_page' => TRUE,
      'show_on_teaser' => TRUE,
      'show_on_form' => FALSE,
      'access_author' => '',
      'i18n' => 0,
      'entity_id' => '',
      'entity_type' => '',
      'entity_bundle' => '',
      'entity_label' => '',
      'entity_base_table' => '',
    );
    return $options;
  }

  function options_form(&$form) {
    parent::options_form($form);
    // Support for i18n flagging requires Translation helpers module.
    $form['i18n'] = array(
      '#type' => 'radios',
      '#title' => t('Internationalization'),
      '#options' => array(
        '1' => t('Flag translations of content as a group'),
        '0' => t('Flag each translation of content separately'),
      ),
      '#default_value' => $this->i18n,
      '#description' => t('Flagging translations as a group effectively allows users to flag the original piece of content regardless of the translation they are viewing. Changing this setting will <strong>not</strong> update content that has been flagged already.'),
      '#access' => module_exists('translation_helpers'),
      '#weight' => 5,
    );

    $form['access']['access_author'] = array(
      '#type' => 'radios',
      '#title' => t('Flag access by content authorship'),
      '#options' => array(
        '' => t('No additional restrictions'),
        'own' => t('Users may only flag content they own'),
        'others' => t('Users may only flag content of others'),
      ),
      '#default_value' => $this->access_author,
      '#description' => t("Restrict access to this flag based on the user's ownership of the content. Users must also have access to the flag through the role settings."),
    );

    $form['display']['show_on_teaser'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display link on node teaser'),
      '#default_value' => $this->show_on_teaser,
      '#access' => empty($this->locked['show_on_teaser']),
    );
    $form['display']['show_on_page'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display link on node page'),
      '#default_value' => $this->show_on_page,
      '#access' => empty($this->locked['show_on_page']),
    );
    $form['display']['show_on_form'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display checkbox on node edit form'),
      '#default_value' => $this->show_on_form,
      '#description' => t('If you elect to have a checkbox on the node edit form, you may specify its initial state in the settings form <a href="@content-types-url">for each content type</a>.', array('@content-types-url' => url('admin/structure/types'))),
      '#access' => empty($this->locked['show_on_form']),
    );
    $entity_info = flag_entity_entity_get_info($this->content_type);
    $form['info']['entity_id'] = array(
      '#type' => 'hidden',
      '#value' => $entity_info['entity keys']['id'],
    );
    $form['info']['entity_type'] = array(
      '#type' => 'hidden',
      '#value' => $this->content_type,
    );
    $form['info']['entity_bundle'] = array(
      '#type' => 'hidden',
      '#value' => $entity_info['entity keys']['bundle'],
    );
    $form['info']['entity_label'] = array(
      '#type' => 'hidden',
      '#value' => $entity_info['entity keys']['label'],
    );
    $form['info']['entity_base_table'] = array(
      '#type' => 'hidden',
      '#value' => $entity_info['base table'],
    );
  }

  /**
   * 
   */
  function _load_content($content_id) {
    if(is_numeric($content_id)) {
      $entity = entity_load($this->content_type, array($content_id));
      return reset($entity);
    }
    return NULL;
  }

  /**
   * 
   */
  function applies_to_content_object($entity) {
    if ($entity && in_array($entity->{$this->entity_bundle}, $this->types)) {
      return TRUE;
    }
    return FALSE;
  }

  /**
   * 
   */
  function access_multiple($content_ids, $account = NULL) {
    $access = parent::access_multiple($content_ids, $account);

    // Ensure that only flaggable node types are granted access. This avoids a
    // node_load() on every type, usually done by applies_to_content_id().
    $result = db_select('node', 'n')->fields('n', array('nid'))
      ->condition('nid', $content_ids, 'IN')
      ->condition('type', $this->types, 'NOT IN')
      ->execute();
    foreach ($result as $row) {
      $access[$row->nid] = FALSE;
    }

    return $access;
  }

  /**
   * 
   */
  function get_content_id($entity) {
    return $entity->{$this->entity_id};
  }

  /**
   * Adjust the Content ID to find the translation parent if i18n-enabled.
   *
   * @param $content_id
   *   The nid for the content.
   * @return
   *   The tnid if available, the nid otherwise.
   */
  function get_translation_id($content_id) {
    if ($this->i18n) {
      $node = $this->fetch_content($content_id);
      if (!empty($node->tnid)) {
        $content_id = $node->tnid;
      }
    }
    return $content_id;
  }

  /**
   * 
   */
  function uses_hook_link($teaser) {
    if ($teaser && $this->show_on_teaser || !$teaser && $this->show_on_page) {
      return TRUE;
    }
    return FALSE;
  }

  /**
   *
   */
  function flag($action, $content_id, $account = NULL, $skip_permission_check = FALSE) {
    $content_id = $this->get_translation_id($content_id);
    return parent::flag($action, $content_id, $account, $skip_permission_check);
  }

  // Instead of overriding is_flagged() we override get_flagging_record(),
  // which is the underlying method.
  function get_flagging_record($content_id, $uid = NULL, $sid = NULL) {
    $content_id = $this->get_translation_id($content_id);
    return parent::get_flagging_record($content_id, $uid, $sid);
  }

  /**
   * 
   */
  function get_labels_token_types() {
    // Fix token error with entity name like commerce_product
    $token_type = flag_entity_token_get_type($this->content_type);
    return array_merge(array($token_type), parent::get_labels_token_types());
  }
  
  /**
   *
   */
  function replace_tokens($label, $contexts, $options, $content_id) {
    if ($content_id && ($entity = $this->fetch_content($content_id))) {
      $contexts[$this->content_type] = $entity;
    }
    return parent::replace_tokens($label, $contexts, $options, $content_id);
  }

  /**
   * 
   */
  function get_flag_action($content_id) {
    $flag_action = parent::get_flag_action($content_id);
    $entity = $this->fetch_content($content_id);
    $flag_action->content_title = $entity->{$this->entity_label};
    $flag_action->content_url = _flag_url($this->entity_type . '/' . $entity->{$this->entity_id});
    return $flag_action;
  }

  /**
   * 
   */
  function get_valid_actions() {
    $actions = module_invoke_all('action_info');
    foreach ($actions as $callback => $action) {
      if ($action['type'] != $this->entity_type && !in_array('any', $action['triggers'])) {
        unset($actions[$callback]);
      }
    }
    return $actions;
  }

  function get_relevant_action_objects($content_id) {
    return array(
      $this->entity_type => $this->fetch_content($content_id),
    );
  }

  function rules_get_event_arguments_definition() {
    return array(
      $this->entity_type => array(
        'type' => $this->entity_type,
        'label' => t('flagged content'),
        'handler' => 'flag_rules_get_event_argument',
      ),
    );
  }

  function rules_get_element_argument_definition() {
    return array('type' => $this->entity_type, 'label' => t('Flagged content'));
  }

  function get_views_info() {
    $entity_info = flag_entity_entity_get_info($this->content_type);
    $this->entity_base_table = $entity_info['base table'];
    $this->entity_id = $entity_info['entity keys']['id'];
    $this->entity_label = isset($entity_info['entity keys']['label']) ? $entity_info['entity keys']['label'] : '';
    return array(
      'views table' => $this->entity_base_table,
      'join field' => $this->entity_id,
      'title field' => $this->entity_label,
      'title' => t($this->entity_label . ' flag'),
      'help' => t('Limit results to only those entity flagged by a certain flag; Or display information about the flag set on a entity.'),
      'counter title' => t('Entity flag counter'),
      'counter help' => t('Include this to gain access to the flag counter field.'),
    );
  }
}

/**
 * Implements hook_views_api().
 */
function flag_entity_views_api() {
  return array(
    'api' => views_api_version(),
    'path' => drupal_get_path('module', 'flag_entity') . '/includes',
  );
}